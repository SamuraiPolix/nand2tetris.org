// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=commandBit); // A or C command sel
    Mux16(a=ThisOutM, b=instruction, sel=commandBit, out=aRegisterInput); //for A register input sel will decide between a or c instruction


    Or(a=commandBit, b=instruction[5], out=commandBitForARegister); // A adreess selector
    ARegister(in=aRegisterInput, load=commandBitForARegister,out=aAddress , out[0..14]=addressM); // output will be registor A and out[0..14] will be adress M
    
    And(a=instruction[15], b=instruction[12], out=addressAorM); // A or M address selector
    Mux16(a=aAddress, b=inM, sel=addressAorM, out=aluInputB); // A or M address

    And(a=instruction[15], b=instruction[4], out=commandBitForDRegister); //D address selector
    DRegister(in=ThisOutM, load=commandBitForDRegister, out=aluInputA);//out put will be registor D
    
    
    ALU(x=aluInputA, y=aluInputB, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
     f=instruction[7], no=instruction[6],out=ThisOutM, out=outM, zr=zr, ng=ng); // Alu for computaion
    
    And(a=instruction[15], b=instruction[3], out=writeM);// M address

    Not(in=ng, out=plus);
    Not(in=zr, out=notzr);

    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=plus, b=notzr, out=plusnotzr);
    And(a=jgt, b=plusnotzr, out=id1);
    And(a=jeq, b=zr, out=id2);
    And(a=jlt, b=ng, out=id3);
    Or(a=id1, b=id2, out=id1or2);
    Or(a=id3, b=id1or2, out=id);
    
    PC(in=aAddress, load=id, inc=true, reset=reset, out[0..14]=pc);

}